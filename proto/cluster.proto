// Copyright 2018 The casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package clusterrpc;

import "eraftpb.proto";

// The Casbin service definition.
service CasbinService {

  rpc Ping(PingRequest) returns (PingReply);

  rpc Enforce(EnforceRequest) returns (Empty) {};

  rpc ImportPolicy(ImportPolicyRequest) returns (Empty) {};

  rpc LoadPolicy(Empty) returns (Empty) {};

  rpc SavePolicy(Empty) returns (Empty) {};

  rpc AddPolicy(PolicyRequest) returns (Empty) {};

  rpc AddNamedPolicy(PolicyRequest) returns (Empty) {};

  rpc RemovePolicy(PolicyRequest) returns (Empty) {};

  rpc RemoveNamedPolicy(PolicyRequest) returns (Empty) {};

  rpc RemoveFilteredPolicy(FilteredPolicyRequest) returns (Empty) {};

  rpc RemoveFilteredNamedPolicy(FilteredPolicyRequest) returns (Empty) {};

  rpc GetPolicy(Empty) returns (Array2DReply) {};

  rpc GetNamedPolicy(PolicyRequest) returns (Array2DReply) {};

  rpc GetFilteredPolicy(FilteredPolicyRequest) returns (Array2DReply) {};

  rpc GetFilteredNamedPolicy(FilteredPolicyRequest) returns (Array2DReply) {};

  rpc AddGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc AddNamedGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc RemoveGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc RemoveNamedGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc RemoveFilteredGroupingPolicy(FilteredPolicyRequest) returns (Empty) {};

  rpc RemoveFilteredNamedGroupingPolicy(FilteredPolicyRequest) returns (Empty) {
  };

  rpc GetGroupingPolicy(Empty) returns (Array2DReply) {};

  rpc GetNamedGroupingPolicy(PolicyRequest) returns (Array2DReply) {};

  rpc GetFilteredGroupingPolicy(FilteredPolicyRequest) returns (Array2DReply) {
  };

  rpc GetFilteredNamedGroupingPolicy(FilteredPolicyRequest)
      returns (Array2DReply) {};

  rpc GetAllSubjects(Empty) returns (ArrayReply) {};

  rpc GetAllNamedSubjects(SimpleGetRequest) returns (ArrayReply) {};

  rpc GetAllObjects(Empty) returns (ArrayReply) {};

  rpc GetAllNamedObjects(SimpleGetRequest) returns (ArrayReply) {};

  rpc GetAllActions(Empty) returns (ArrayReply) {};

  rpc GetAllNamedActions(SimpleGetRequest) returns (ArrayReply) {};

  rpc GetAllRoles(Empty) returns (ArrayReply) {};

  rpc GetAllNamedRoles(SimpleGetRequest) returns (ArrayReply) {};

  rpc HasPolicy(PolicyRequest) returns (Empty) {};

  rpc HasNamedPolicy(PolicyRequest) returns (Empty) {};

  rpc HasGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc HasNamedGroupingPolicy(PolicyRequest) returns (Empty) {};

  rpc AddRoleForUser(UserRoleRequest) returns (Empty) {};

  rpc DeleteRoleForUser(UserRoleRequest) returns (Empty) {};

  rpc DeleteUser(UserRoleRequest) returns (Empty) {};

  rpc GetRolesForUser(UserRoleRequest) returns (ArrayReply) {};

  rpc GetImplicitRolesForUser(UserRoleRequest) returns (ArrayReply) {};

  rpc GetUsersForRole(UserRoleRequest) returns (ArrayReply) {};

  rpc GetPermissionsForUser(PermissionRequest) returns (Array2DReply) {};

  rpc GetImplicitPermissionsForUser(PermissionRequest) returns (Array2DReply) {
  };

  rpc Raft(RaftRequest) returns (RaftReply);

  rpc Join(JoinRequest) returns (ResultReply);
}

enum ResultCode {
  SUCCESS = 0;
  FAILURE = 1;
  NO_RESULTS = 2;
  UNKNOWNNNNN = 3;
  MAGIC_UNICORN = 4;
}

enum RaftRequestType {
  JOIN = 0;
  LEAVE = 1;
  ADD = 2;
  DELETE = 3;
  COMMIT = 4;
  CONF_CHANGE = 5;
  PING = 6;
}

message JoinRequest {
  uint64 id = 1;
  string host = 2;
}

message RaftRequest {
  RaftRequestType tpe = 1;
  bytes message = 2;
}

message RaftReply { ResultCode code = 1; }

message ResultReply {
  ResultCode code = 1;
  string message = 2;
}

message PingReply { string status = 1; }

message PingRequest {}

message NewEnforcerRequest {
  string modelText = 1;
  int32 adapterHandle = 2;
}

message EnforceRequest { repeated string params = 2; }

message PolicyRequest {
  string pType = 1;
  repeated string params = 2;
}

message SimpleGetRequest { string pType = 1; }

message ArrayReply { repeated string array = 1; }

message FilteredPolicyRequest {
  string pType = 1;
  int32 fieldIndex = 2;
  repeated string fieldValues = 3;
}

message Empty {};

message UserRoleRequest {
  string user = 1;
  string role = 2;
}

message PermissionRequest {
  string user = 1;
  repeated string permissions = 2;
}

message ImportPolicyRequest { bytes data = 1; };

message Array2DReply {
  message d { repeated string d1 = 1; }
  repeated d d2 = 1;
}
